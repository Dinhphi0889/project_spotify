generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Discuss {
  userId          Int?
  discussId       Int       @id @default(autoincrement())
  content         String?   @db.Text
  songId          Int?
  discussDate     DateTime? @db.DateTime(0)
  replayDiscussId String?   @db.Text
  User            User?     @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "Discuss_ibfk_1")
  Song            Song?     @relation(fields: [songId], references: [songId], onDelete: NoAction, onUpdate: NoAction, map: "Discuss_ibfk_2")

  @@index([songId], map: "songId")
  @@index([userId], map: "userId")
}

model Following {
  followingId                          Int   @id @default(autoincrement())
  userId                               Int?
  followingUserId                      Int?
  User_Following_userIdToUser          User? @relation("Following_userIdToUser", fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "Following_ibfk_1")
  User_Following_followingUserIdToUser User? @relation("Following_followingUserIdToUser", fields: [followingUserId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "Following_ibfk_2")

  @@index([followingUserId], map: "followingUserId")
  @@index([userId], map: "userId")
}

model Genre {
  genreId    Int        @id @default(autoincrement())
  nameGenre  String?    @db.VarChar(255)
  createTime DateTime?  @db.DateTime(0)
  Playlist   Playlist[]
  Song       Song[]
}

model LikedSong {
  id          Int      @id @default(autoincrement())
  idUser      Int?
  idSongLiked Int?      
  liked       Boolean?
  User        User?    @relation(fields: [idUser], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "LikedSong_ibfk_1")
  Song        Song?    @relation(fields: [idSongLiked], references: [songId], onDelete: NoAction, onUpdate: NoAction, map: "LikedSong_ibfk_2")

  @@index([idUser], map: "idUser")
  @@index([idSongLiked], map: "idSongLiked")
}

model ListFriends {
  id        Int      @id @default(autoincrement())
  idMess    Int?
  idUser    Int?
  isFriends Boolean?
  Message   Message? @relation(fields: [idMess], references: [idMess], onDelete: NoAction, onUpdate: NoAction, map: "ListFriends_ibfk_1")
  User      User?    @relation(fields: [idUser], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "ListFriends_ibfk_2")

  @@index([idMess], map: "idMess")
  @@index([idUser], map: "idUser")
}

model Message {
  idMess      Int           @id @default(autoincrement())
  idSender    Int?
  contentMess String?       @db.Text
  timeSend    DateTime?     @db.DateTime(0)
  roomChat    String?       @db.VarChar(100)
  ListFriends ListFriends[]
  User        User?         @relation(fields: [idSender], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "Message_ibfk_2")

  @@index([idSender], map: "idUser")
}

model Playlist {
  id             Int              @id @default(autoincrement())
  userId         Int?
  genreId        Int?
  type           String?          @db.VarChar(50)
  imagePath      String?          @db.VarChar(255)
  playlistName   String?          @db.VarChar(255)
  likes          Int?
  songs          Int?
  discription    String?          @db.Text
  User           User?            @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "Playlist_ibfk_1")
  Genre          Genre?           @relation(fields: [genreId], references: [genreId], onDelete: NoAction, onUpdate: NoAction, map: "Playlist_ibfk_2")
  Song           Song?            @relation(fields: [songs], references: [songId], onDelete: NoAction, onUpdate: NoAction, map: "Playlist_ibfk_3")
  PlaylistLikes  PlaylistLikes[]
  RecentPlayList RecentPlayList[]

  @@index([genreId], map: "genreId")
  @@index([userId], map: "userId")
  @@index([songs], map: "songs")
}

model PlaylistLikes {
  userId     Int?
  playlistId Int?
  id         Int       @id @default(autoincrement())
  User       User?     @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "PlaylistLikes_ibfk_1")
  Playlist   Playlist? @relation(fields: [playlistId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "PlaylistLikes_ibfk_2")

  @@index([playlistId], map: "playlistId")
  @@index([userId], map: "userId")
}

model RecentPlayList {
  userId     Int?
  playlistId Int?
  createTime DateTime? @db.DateTime(0)
  id         Int       @id @default(autoincrement())
  User       User?     @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "RecentPlayList_ibfk_1")
  Playlist   Playlist? @relation(fields: [playlistId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "RecentPlayList_ibfk_2")

  @@index([playlistId], map: "playlistId")
  @@index([userId], map: "userId")
}

model RecentSong {
  id     Int       @id @default(autoincrement())
  userId Int?
  songId Int?
  time   DateTime? @db.DateTime(0)
  User   User?     @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "RecentSong_ibfk_1")
  Song   Song?     @relation(fields: [songId], references: [songId], onDelete: NoAction, onUpdate: NoAction, map: "RecentSong_ibfk_2")

  @@index([userId], map: "userId")
  @@index([songId], map: "songId")
}

model Song {
  songId         Int          @id @default(autoincrement())
  userId         Int?
  genreId        Int?
  songName       String       @db.VarChar(255)
  viewer         Int?         @default(0)
  duration       Int?         @db.MediumInt
  popular        Boolean?
  description    String?      @db.Text
  songImage      String?      @db.VarChar(255)
  publicDate     DateTime?    @db.Date
  filePath       String?      @db.VarChar(255)
  discussQuality Int?
  Discuss        Discuss[]
  LikedSong      LikedSong[]
  Playlist       Playlist[]
  RecentSong     RecentSong[]
  User           User?        @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "Song_ibfk_1")
  Genre          Genre?       @relation(fields: [genreId], references: [genreId], onDelete: NoAction, onUpdate: NoAction, map: "Song_ibfk_2")

  @@index([genreId], map: "genreId")
  @@index([userId], map: "userId")
}

model User {
  userId                                    Int              @id @default(autoincrement())
  account                                   String           @db.VarChar(255)
  name                                      String?          @db.VarChar(255)
  nationality                               String?          @db.VarChar(255)
  chanalName                                String?          @db.VarChar(255)
  pathImage                                 String?          @db.VarChar(255)
  desciption                                String?          @db.Text
  refreshToken                              String?          @db.VarChar(255)
  password                                  String           @db.VarChar(255)
  banner                                    String?          @db.VarChar(255)
  role                                      String?          @db.VarChar(50)
  Discuss                                   Discuss[]
  Following_Following_userIdToUser          Following[]      @relation("Following_userIdToUser")
  Following_Following_followingUserIdToUser Following[]      @relation("Following_followingUserIdToUser")
  LikedSong                                 LikedSong[]
  ListFriends                               ListFriends[]
  Message                                   Message[]
  Playlist                                  Playlist[]
  PlaylistLikes                             PlaylistLikes[]
  RecentPlayList                            RecentPlayList[]
  RecentSong                                RecentSong[]
  Song                                      Song[]
}
